% PLANETARY STATE VECTORS USING JULIAN DATE INPUT% By: Brian Kaplinger, Ph.D.% Changed: February 18, 2021function [R, V] = planets_SV_JD(id, JD)  % Input Variables:  %   id = planetary id number: Mercury (1), Venus (2), Earth (3),  %        Mars (4), Jupiter (5), Saturn (6), Uranus (7), Neptune (8).  %        Pluto (9) is included for historical compatibility  %   JD = Julian date - including time of day. Direct input to allow for   %        easier incrementation compared to planets_SV, such as for  %        porkchop plots.  %  % Output Variables:  %   R(1:3) = position components  (km)  %   V(1:3) = velocity components  (km/s)  %            Position and Velocity given with respect to solar  %            system barycenter in J2000 coordinates.% standard gravitational parameter for the Sunmu = 1.32712440e11;T = (JD - 2451545)/36525; % time in Julian centuries% array for orbital elements and rates% J2000 Planetary Orbital Elements% The columns of each row are:% a = semimajor axis (AU), e = eccentricity, i = inclination (degrees)% RAAN (degrees), w_hat = longitude of perihelion (degrees), % L = mean longitude (degrees)J2000_elements = ...[0.38709927,0.20563593,7.00497902,48.33076593,77.45779628,252.25032350;  0.72333566,0.00677672,3.39467605,76.67984255,131.60246718,181.97909950;  1.00000261,0.01671123,-0.00001531,0.0,102.93768193,100.46457166;  1.52371034,0.09339410,1.84969142,49.55953891,-23.94362959,-4.55343205;  5.20288700,0.04838624,1.30439695,100.47390909,14.72847983,34.39644501;  9.53667594,0.05386179,2.48599187,113.66242448,92.59887831,49.95424423; 19.18916464,0.04725744,0.77263783,74.01692503,170.95427630,313.23810451; 30.06992276,0.00859048,1.77004347,131.78422574,44.96476227,-55.12002969; 39.48211675,0.24882730,17.14001206,110.30393684,224.06891629,238.92903833];% Rates of change of the J2000_elements per Julian century (Cy). % The columns of each row are: a_dot (AU/Cy), e_dot (1/Cy), i_dot (deg/Cy),% RA_dot (deg/Cy), w_hat_dot (deg/Cy), Ldot (deg/Cy)cent_rates = ... [0.00000037,0.00001906,-0.00594749,-0.12534081,0.16047689,149472.67411175;   0.00000390,-0.00004107,-0.00078890,-0.27769418,0.00268329,58517.81538729;   0.00000562,-0.00004392,-0.01294668,0.0,0.32327364,35999.37244981;   0.0001847,0.00007882,-0.00813131,-0.29257343,0.44441088,19140.30268499;  -0.00011607,-0.00013253,-0.00183714,0.20469106,0.21252668,3034.74612775; -0.00125060,-0.00050991,0.00193609,-0.28867794,-0.41897216,1222.49362201;-0.00196176,-0.00004397,-0.00242939,0.04240589,0.40805281,428.48202785; 0.00026291,0.00005105,0.00035372,-0.00508664,-0.32241464,218.45945325; -0.00031596,0.00005170,0.00004818,-0.01183482,-0.04062942,145.20780515];  J2000_coe = J2000_elements(id,:);rates = cent_rates(id,:);% project to desired timeelements = J2000_coe + rates*T;% convert to desired unitsau = 149597870.7; elements(1) = elements(1)*au; % au to kmelements(3:6) = elements(3:6)*pi/180; % deg to rad% compute required elementsa = elements(1);e = elements(2);h = sqrt(mu*a*(1-e^2));inc = elements(3);Omega = mod(elements(4),2*pi);w_hat = mod(elements(5),2*pi);L = mod(elements(6),2*pi);omega = mod(w_hat-Omega,2*pi);M = mod(L-w_hat,2*pi);% compute eccentric anomaly solving Kepler's Eq.tol = 1e-12;  % set tolerance for solution valuemaxiter = 1000;  % set maximum number of iterations  % set initial guess (in radians)E = M;  % begin iterationfor i = 1:maxiter    f = E - e*sin(E) - M;    df = 1 - e*cos(E);    % set new iteration value    E_new = E - f/df;    % check convergence    if (abs(E-E_new) < tol)        E = E_new;        break;    else        E = E_new;    endend% convert eccentric anomaly to true anomalytheta = mod(2*atan(sqrt((1+e)/(1-e))*tan(E/2)),2*pi);% calculate the position vector components in perifocal framer = (h^2/mu)/(1 + e*cos(theta));r_p = r.*[cos(theta); sin(theta); 0];  % calculate the velocity vector components in perifocal framev_p = (mu/h).*[-sin(theta); e + cos(theta); 0];  % form rotation matrix of angle Omega about 3 axisR1 = [cos(Omega), sin(Omega), 0;     -sin(Omega), cos(Omega), 0;               0,          0, 1];             % form rotation matrix of angle inc about 1 axisR2 = [1,       0,      0;      0,  cos(inc), sin(inc);      0, -sin(inc), cos(inc)];    % form rotation matrix of angle omega about 3 axisR3 = [cos(omega), sin(omega), 0;     -sin(omega), cos(omega), 0;               0,          0, 1];  % coordinate conversion from geocentric equatorial to perifocal is the% matrix multiplication of these three operations (note order)C_GP = R3*R2*R1;  % coordinate conversion from perifocal back to geocentric equatorial% is the inverse of this matrix, which is also the transposeC_PG = C_GP';  % coordinates of position and velocity vectors in geocentric equatiorial% frame is this matrix times the array of coordinates in perifocalR = C_PG*r_p;V = C_PG*v_p;end