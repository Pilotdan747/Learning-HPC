from math import floor
from numpy import array, mat
from math import sqrt, sin, cos, tan, atan, pi

J2000_elements = array([[0.38709927,0.20563593,7.00497902,48.33076593,77.45779628,252.25032350], 
[0.72333566,0.00677672,3.39467605,76.67984255,131.60246718,181.97909950], 
[1.00000261,0.01671123,-0.00001531,0.0,102.93768193,100.46457166],
[1.52371034,0.09339410,1.84969142,49.55953891,-23.94362959,-4.55343205],
[5.20288700,0.04838624,1.30439695,100.47390909,14.72847983,34.39644501],
[9.53667594,0.05386179,2.48599187,113.66242448,92.59887831,49.95424423],
[19.18916464,0.04725744,0.77263783,74.01692503,170.95427630,313.23810451],
[30.06992276,0.00859048,1.77004347,131.78422574,44.96476227,-55.12002969],
[39.48211675,0.24882730,17.14001206,110.30393684,224.06891629,238.92903833]])

cent_rates = array([[0.00000037,0.00001906,-0.00594749,-0.12534081,0.16047689,149472.67411175],  
[0.00000390,-0.00004107,-0.00078890,-0.27769418,0.00268329,58517.81538729],
[0.00000562,-0.00004392,-0.01294668,0.0,0.32327364,35999.37244981],
[0.0001847,0.00007882,-0.00813131,-0.29257343,0.44441088,19140.30268499],
[-0.00011607,-0.00013253,-0.00183714,0.20469106,0.21252668,3034.74612775],
[-0.00125060,-0.00050991,0.00193609,-0.28867794,-0.41897216,1222.49362201],
[-0.00196176,-0.00004397,-0.00242939,0.04240589,0.40805281,428.48202785],
[0.00026291,0.00005105,0.00035372,-0.00508664,-0.32241464,218.45945325],
[-0.00031596,0.00005170,0.00004818,-0.01183482,-0.04062942,145.20780515]]); 

def julianDate(y, m, d, hr, min, s):
    j0 = 367*y-floor(7*(y+floor((m+9)/12))/4)+floor(275*m/9)+d + 1721013.5
    ut = hr + min/60 + s/3600
    jd = j0 + ut/24
    
    return jd

def planets_SV_JD(id, jd):
    muSun = 1.327124e11
    T = (jd - 2451545)/36525

    elements = J2000_elements[id - 1, :] + cent_rates[id - 1, :]*T

    AU = 149597870.7
    elements[0] = elements[0]*AU
    elements[2:] = elements[2:]*pi/180 

    a = elements[0]
    e = elements[1]
    h = sqrt(muSun*a*(1 - e**2))
    inc = elements[2]
    RAAN = elements[3] % (2*pi)
    wHat = elements[4] % (2*pi)
    L = elements[5] % (2*pi)
    omega = (wHat - RAAN) % (2*pi)
    M = (L - wHat) % (2*pi) 

    tol = 1e-12
    maxIter = 1000

    E = M
    for i in range(0, 1000):
        f = E - e*sin(E) - M
        df = 1 - e*cos(E)

        ENew = E - f/df
        if abs(E - ENew) < tol:
            break

        E = ENew

    theta = (2*atan(sqrt((1 + e)/(1 - e))*tan(E/2))) % (2*pi)
    r = (h**2/muSun)/(1 + e*cos(theta))

    rp = r*array([[cos(theta)], [sin(theta)], [0]])
    vp = muSun/h*array([[-sin(theta)], [e + cos(theta)], [0]])

    mat1 = mat([[cos(RAAN), -sin(RAAN), 0], 
                [sin(RAAN),  cos(RAAN), 0],
                [0,           0,          1]])
    
    mat2 = mat([[1, 0,         0], 
                [0, cos(inc), -sin(inc)],
                [0, sin(inc),  cos(inc)]])

    mat3 = mat([[cos(omega), -sin(omega), 0], 
                [sin(omega), cos(omega), 0],
                [0,         0,         1]])
    
    rHelio = mat1*mat2*mat3*rp
    vHelio = mat1*mat2*mat3*vp

    return rHelio, vHelio